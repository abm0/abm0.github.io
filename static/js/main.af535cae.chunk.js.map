{"version":3,"sources":["components/Exercise.tsx","components/Welcome.tsx","utils/index.tsx","components/NotesList.tsx","components/Keyboard.tsx","components/Fretboard.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Modes","WelcomeMessage","onButtonClick","className","onClick","randomizeIndex","array","Math","floor","random","length","getRandomItemIndex","previousNoteIndex","nextNoteIndex","NotesList","answerNotes","activeNoteIndex","proceedToNextNote","useState","shuffledAnswerNotes","setShuffledAnswerNotes","correctNotesIndex","setCorrectNotesIndex","wrongNotesIndex","setWrongNotesIndex","correctAnswerAnimationActive","setCorrectAnswerAnimationActive","useEffect","shuffle","map","item","index","name","handleNoteClick","useCallback","setTimeout","cn","includes","keys","type","noteIndex","Keyboard","inputBlocked","setInputBlocked","key","arrIndex","key_correct","key_wrong","strings","Fretboard","fretNumber","notes","stringIndex","fretIndex","bothNotes","notesRus","note","notesEng","questionNotesSetMap","RUS_TO_ENG","ENG_TO_RUS","KEYBOARD","FRETBOARD","answerNotesSetMap","Exercise","React","memo","mode","setMode","questionNotes","setQuestionNotes","setAnswerNotes","setActiveNoteIndex","setPreviousNoteIndex","answerComponent","useMemo","App","started","setStarted","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.af535cae.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback, useMemo } from \"react\";\n\nimport { getRandomItemIndex } from \"../utils\";\n\nimport { NotesList } from \"./NotesList\";\nimport { Keyboard } from \"./Keyboard\";\nimport { Fretboard } from \"./Fretboard\";\n\nimport notesRus from \"../data/notesRus.json\";\nimport notesEng from \"../data/notesEng.json\";\n\nconst bothNotes = notesRus.map((note, index) => `${notesEng[index]} (${note})`);\n\nenum Modes {\n  RUS_TO_ENG,\n  ENG_TO_RUS,\n  KEYBOARD,\n  FRETBOARD,\n}\n\nconst questionNotesSetMap = {\n  [Modes.RUS_TO_ENG]: notesRus,\n  [Modes.ENG_TO_RUS]: notesEng,\n  [Modes.KEYBOARD]: bothNotes,\n  [Modes.FRETBOARD]: bothNotes,\n};\n\nconst answerNotesSetMap = {\n  [Modes.RUS_TO_ENG]: notesEng,\n  [Modes.ENG_TO_RUS]: notesRus,\n};\n\nexport const Exercise = React.memo(() => {\n  const { RUS_TO_ENG, ENG_TO_RUS, KEYBOARD, FRETBOARD } = Modes;\n\n  const [mode, setMode] = useState(RUS_TO_ENG);\n  const [questionNotes, setQuestionNotes] = useState<string[]>(notesRus);\n  const [answerNotes, setAnswerNotes] = useState<string[]>(notesEng);\n  const [activeNoteIndex, setActiveNoteIndex] = useState<number>(0);\n  const [previousNoteIndex, setPreviousNoteIndex] = useState<number>();\n\n  useEffect(() => {\n    switch (mode) {\n      case RUS_TO_ENG:\n        setQuestionNotes(questionNotesSetMap[RUS_TO_ENG]);\n        setAnswerNotes(answerNotesSetMap[RUS_TO_ENG]);\n\n        break;\n\n      case ENG_TO_RUS:\n        setQuestionNotes(questionNotesSetMap[ENG_TO_RUS]);\n        setAnswerNotes(answerNotesSetMap[ENG_TO_RUS]);\n\n        break;\n    }\n  }, [mode, RUS_TO_ENG, ENG_TO_RUS]);\n\n  useEffect(() => {\n    setActiveNoteIndex(getRandomItemIndex(questionNotes));\n  }, []);\n\n  const proceedToNextNote = useCallback(() => {\n    setPreviousNoteIndex(activeNoteIndex);\n    setActiveNoteIndex(getRandomItemIndex(questionNotes, previousNoteIndex));\n  }, [questionNotes, activeNoteIndex, previousNoteIndex]);\n\n  const answerComponent = useMemo(() => {\n    switch (mode) {\n      case RUS_TO_ENG:\n      case ENG_TO_RUS:\n        return (\n          <NotesList\n            activeNoteIndex={activeNoteIndex}\n            answerNotes={answerNotes}\n            proceedToNextNote={proceedToNextNote}\n          />\n        );\n\n      case KEYBOARD:\n        return (\n          <Keyboard\n            activeNoteIndex={activeNoteIndex}\n            proceedToNextNote={proceedToNextNote}\n          />\n        );\n\n      case FRETBOARD:\n        return (\n          <Fretboard\n            activeNoteIndex={activeNoteIndex}\n            proceedToNextNote={proceedToNextNote}\n          />\n        );\n    }\n  }, [\n    mode,\n    activeNoteIndex,\n    answerNotes,\n    ENG_TO_RUS,\n    RUS_TO_ENG,\n    KEYBOARD,\n    FRETBOARD,\n    proceedToNextNote,\n  ]);\n\n  return (\n    <>\n      <header className=\"exercise__header\">\n        Тип тренировки:{\" \"}\n        <button onClick={() => setMode(RUS_TO_ENG)}>Рус-англ</button>{\" \"}\n        <button onClick={() => setMode(ENG_TO_RUS)}>Англ-рус</button>{\" \"}\n        <button onClick={() => setMode(KEYBOARD)}>Ноты на клавиатуре</button>{\" \"}\n        <button onClick={() => setMode(FRETBOARD)}>Ноты на грифе</button>{\" \"}\n      </header>\n      <div className=\"exercise__container\">\n        <div className=\"exercise__question-block\">\n          Текущая нота:{\" \"}\n          <span className=\"exercise__active-note\">\n            {questionNotes[activeNoteIndex]}\n          </span>\n        </div>\n        {answerComponent}\n      </div>\n    </>\n  );\n});\n","import React from \"react\";\n\ntype Props = {\n  onButtonClick: () => void;\n};\n\nexport const WelcomeMessage: React.FC<Props> = ({ onButtonClick }) => {\n  return (\n    <div>\n      <p>Добро пожаловать!</p>\n      <div className=\"button-container\">\n        <button onClick={onButtonClick}>Начать</button>\n      </div>\n    </div>\n  );\n};\n","const randomizeIndex = (array: string[]) =>\n  Math.floor(Math.random() * array.length);\n\nexport const getRandomItemIndex = (\n  array: string[],\n  previousNoteIndex?: number\n): number => {\n  let nextNoteIndex = randomizeIndex(array);\n\n  while (nextNoteIndex === previousNoteIndex) {\n    nextNoteIndex = randomizeIndex(array);\n  }\n\n  return nextNoteIndex;\n};\n","import React, { useState, useCallback, useEffect } from \"react\";\nimport cn from \"classnames\";\nimport shuffle from \"lodash/shuffle\";\n\nexport type AnswerListProps = {\n  answerNotes: string[];\n  activeNoteIndex: number;\n  proceedToNextNote: () => void;\n};\n\nexport type AnswerItem = {\n  name: string;\n  index: number;\n};\n\nconst getAnswerItemsArr = (notes: string[]): AnswerItem[] => {\n  return notes.map((item, index) => ({ name: item, index }));\n};\n\nexport const NotesList: React.FC<AnswerListProps> = ({\n  answerNotes,\n  activeNoteIndex,\n  proceedToNextNote,\n}) => {\n  const [shuffledAnswerNotes, setShuffledAnswerNotes] = useState<AnswerItem[]>(\n    []\n  );\n  const [correctNotesIndex, setCorrectNotesIndex] = useState<number[]>([]);\n  const [wrongNotesIndex, setWrongNotesIndex] = useState<number[]>([]);\n  const [\n    correctAnswerAnimationActive,\n    setCorrectAnswerAnimationActive,\n  ] = useState<boolean>(false);\n\n  useEffect(() => {\n    // TODO: добавить композицию\n    setShuffledAnswerNotes(shuffle(getAnswerItemsArr(answerNotes)));\n    setCorrectNotesIndex([]);\n    setWrongNotesIndex([]);\n  }, [activeNoteIndex, answerNotes]);\n\n  const handleNoteClick = useCallback(\n    (index: number) => {\n      if (correctAnswerAnimationActive) return;\n\n      if (activeNoteIndex === index) {\n        setCorrectAnswerAnimationActive(true);\n        setCorrectNotesIndex([...correctNotesIndex, index]);\n        setTimeout(() => {\n          setCorrectAnswerAnimationActive(false);\n          proceedToNextNote();\n        }, 1500);\n        return;\n      }\n\n      setWrongNotesIndex([...wrongNotesIndex, index]);\n    },\n    [\n      correctAnswerAnimationActive,\n      activeNoteIndex,\n      correctNotesIndex,\n      wrongNotesIndex,\n      setCorrectNotesIndex,\n      setWrongNotesIndex,\n      proceedToNextNote,\n      setCorrectAnswerAnimationActive,\n    ]\n  );\n\n  return (\n    <>\n      <p className=\"exercise__answer-text\">Выберите ответ:</p>\n      <ul className=\"exercise__answers-list\">\n        {shuffledAnswerNotes.map(({ name, index }) => (\n          <li\n            key={`answerItem_${index}`}\n            className={cn(\"exercise__answers-list-item\", {\n              \"list-item_wrong\": wrongNotesIndex.includes(index),\n              \"list-item_correct\": correctNotesIndex.includes(index),\n            })}\n          >\n            <button onClick={() => handleNoteClick(index)}>{name}</button>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n","import React, { useState, useCallback, useEffect } from \"react\";\nimport cn from \"classnames\";\n\nexport type KeyboardProps = {\n  activeNoteIndex: number;\n  proceedToNextNote: () => void;\n};\n\nconst keys = [\n  {\n    type: \"white\",\n    noteIndex: 0,\n  },\n  {\n    type: \"black\",\n    noteIndex: 0,\n  },\n  {\n    type: \"white\",\n    noteIndex: 1,\n  },\n  {\n    type: \"black\",\n    noteIndex: 0,\n  },\n  {\n    type: \"white\",\n    noteIndex: 2,\n  },\n  {\n    type: \"white\",\n    noteIndex: 3,\n  },\n  {\n    type: \"black\",\n    noteIndex: 0,\n  },\n  {\n    type: \"white\",\n    noteIndex: 4,\n  },\n  {\n    type: \"black\",\n    noteIndex: 0,\n  },\n  {\n    type: \"white\",\n    noteIndex: 5,\n  },\n  {\n    type: \"black\",\n    noteIndex: 0,\n  },\n  {\n    type: \"white\",\n    noteIndex: 6,\n  },\n];\n\nexport const Keyboard: React.FC<KeyboardProps> = ({\n  activeNoteIndex,\n  proceedToNextNote,\n}) => {\n  const [correctNotesIndex, setCorrectNotesIndex] = useState<number[]>([]);\n  const [wrongNotesIndex, setWrongNotesIndex] = useState<number[]>([]);\n  const [inputBlocked, setInputBlocked] = useState<boolean>(false);\n\n  useEffect(() => {\n    setCorrectNotesIndex([]);\n    setWrongNotesIndex([]);\n  }, [activeNoteIndex]);\n\n  const handleNoteClick = useCallback(\n    (index: number) => {\n      if (inputBlocked) return;\n\n      if (activeNoteIndex === index) {\n        setInputBlocked(true);\n        setCorrectNotesIndex([...correctNotesIndex, index]);\n        setTimeout(() => {\n          setInputBlocked(false);\n          proceedToNextNote();\n        }, 1500);\n        return;\n      }\n\n      setWrongNotesIndex([...wrongNotesIndex, index]);\n    },\n    [\n      inputBlocked,\n      activeNoteIndex,\n      correctNotesIndex,\n      wrongNotesIndex,\n      setCorrectNotesIndex,\n      setWrongNotesIndex,\n      proceedToNextNote,\n      setInputBlocked,\n    ]\n  );\n\n  return (\n    <div className=\"keyboard__container\">\n      <ul className=\"keys-list\">\n        {keys.map((key, arrIndex) => (\n          <li\n            key={`key-${arrIndex}`}\n            className={cn(`keys-list__key_${key.type}`, {\n              key_correct: correctNotesIndex.includes(key.noteIndex),\n              key_wrong: wrongNotesIndex.includes(key.noteIndex),\n            })}\n            onClick={() => handleNoteClick(key.noteIndex)}\n          />\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport cn from \"classnames\";\n\nexport type FretboardProps = {\n  activeNoteIndex: number;\n  proceedToNextNote: () => void;\n};\n\n// fretboard notes by index map\n// TODO: calculate\nconst first = [2, 3, 9, 4, 10, 5, 11, 6, 0, 7, 1, 8, 2];\nconst second = [6, 0, 7, 1, 8, 2, 3, 9, 4, 10, 5, 11, 6];\nconst third = [4, 10, 5, 11, 6, 0, 7, 1, 8, 2, 3, 9, 4];\nconst fourth = [1, 8, 2, 3, 9, 4, 10, 5, 11, 6, 0, 7, 1];\nconst fifth = [5, 11, 6, 0, 7, 1, 8, 2, 3, 9, 4, 10, 5];\nconst sixth = [2, 3, 9, 4, 10, 5, 11, 6, 0, 7, 1, 8, 2];\n\nconst strings = [first, second, third, fourth, fifth, sixth];\n\nexport const Fretboard: React.FC<FretboardProps> = ({\n  activeNoteIndex,\n  proceedToNextNote,\n}) => {\n  const [correctNotesIndex, setCorrectNotesIndex] = useState<number[]>([]);\n  const [wrongNotesIndex, setWrongNotesIndex] = useState<number[]>([]);\n  const [inputBlocked, setInputBlocked] = useState<boolean>(false);\n\n  useEffect(() => {\n    setCorrectNotesIndex([]);\n    setWrongNotesIndex([]);\n  }, [activeNoteIndex]);\n\n  const handleNoteClick = useCallback(\n    (index: number) => {\n      if (inputBlocked) return;\n\n      if (activeNoteIndex === index) {\n        setInputBlocked(true);\n        setCorrectNotesIndex([...correctNotesIndex, index]);\n        setTimeout(() => {\n          setInputBlocked(false);\n          proceedToNextNote();\n        }, 1500);\n        return;\n      }\n\n      setWrongNotesIndex([...wrongNotesIndex, index]);\n    },\n    [\n      inputBlocked,\n      activeNoteIndex,\n      correctNotesIndex,\n      wrongNotesIndex,\n      setCorrectNotesIndex,\n      setWrongNotesIndex,\n      proceedToNextNote,\n      setInputBlocked,\n    ]\n  );\n\n  return (\n    <div className=\"fretboard__container\">\n      <table className=\"fretboard__frets-table\">\n        <tr>\n          {[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12].map((fretNumber) => (\n            <td key={`fretNumber-${fretNumber}`}>{fretNumber}</td>\n          ))}\n        </tr>\n        {strings.map((notes, stringIndex) => (\n          <tr key={`string-${stringIndex}`}>\n            {notes.map((noteIndex, fretIndex) => (\n              <td\n                className=\"fretboard__fret\"\n                key={`fret-${stringIndex}-${fretIndex}`}\n              >\n                <div\n                  className={cn(\"fretboard__fret-button\", {\n                    \"fret-button_correct\": correctNotesIndex.includes(\n                      noteIndex\n                    ),\n                    \"fret-button_wrong\": wrongNotesIndex.includes(noteIndex),\n                  })}\n                  onClick={() => handleNoteClick(noteIndex)}\n                />\n              </td>\n            ))}\n          </tr>\n        ))}\n      </table>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { WelcomeMessage } from \"./components/Welcome\";\nimport { Exercise } from \"./components/Exercise\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const [started, setStarted] = useState(false);\n\n  return (\n    <div className=\"App\">\n      {started ? (\n        <WelcomeMessage onButtonClick={() => setStarted(true)} />\n      ) : (\n        <Exercise />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import \"./wdyr\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}